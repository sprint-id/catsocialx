BEGIN TRANSACTION;

CREATE TABLE IF NOT EXISTS USERS (
    id UUID PRIMARY KEY,
    email VARCHAR UNIQUE,
    name VARCHAR,
    image_url VARCHAR,
    password VARCHAR,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS bank_accounts (
    id SERIAL PRIMARY KEY,
    user_id UUID REFERENCES USERS(id) ON DELETE CASCADE,
    bank_name VARCHAR,
    bank_account_name VARCHAR,
    bank_account_number VARCHAR UNIQUE,
    balance INT DEFAULT 0,
    currency VARCHAR DEFAULT 'USD',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS transactions (
    id SERIAL PRIMARY KEY,
    user_id UUID REFERENCES USERS(id) ON DELETE CASCADE,
    bank_account_id INT REFERENCES bank_accounts(id) ON DELETE CASCADE,
    balance INT,
    currency VARCHAR DEFAULT 'USD',
    transfer_proof_img VARCHAR,
    created_at BIGINT DEFAULT EXTRACT(EPOCH FROM NOW())
);

-- CREATE TABLE FRIENDS (
--     id SERIAL PRIMARY KEY,
--     a UUID REFERENCES USERS(id) ON DELETE CASCADE,
--     b UUID REFERENCES USERS(id) ON DELETE CASCADE,
--     CONSTRAINT unique_friendship UNIQUE (a, b),
--     created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
-- );

-- CREATE TABLE POSTS (
--     id UUID PRIMARY KEY,
--     content VARCHAR,
--     creator UUID REFERENCES USERS(id) ON DELETE CASCADE,
--     created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
-- );

-- CREATE TABLE TAGS (
--     id SERIAL PRIMARY KEY,
--     tag VARCHAR,
--     post_id UUID REFERENCES POSTS(id) ON DELETE CASCADE,
--     created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
-- );

-- CREATE TABLE COMMENTS (
--     id SERIAL PRIMARY KEY,
--     post_id UUID REFERENCES POSTS(id) ON DELETE CASCADE,
--     comment VARCHAR,
--     user_id UUID REFERENCES USERS(id) ON DELETE CASCADE,
--     created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
-- );

COMMIT TRANSACTION;